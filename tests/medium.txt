---------------------------------------
Test the "medium" sample specification.
---------------------------------------

    >>> sample = 'sample-medium.yml'

    >>> extras = r"""
    ... admin_email: test@example.com
    ... plone_initial_password: admin
    ... additional_packages:
    ...   - curl
    ...   - lsof
    ... muninnode_query_ips:
    ...     - 127.0.0.1
    ... """

    >>> import subprocess
    >>> import sys
    >>> import time

Set up local-configure.yml by copying our sample.
Append admin email and password.

    >>> with open(sample, 'r') as f:
    ...     with open('local-configure.yml', 'w') as g:
    ...         g.write(f.read() + extras)

Vagrant up

    >>> print >> sys.stderr, "Bringing up %s" % box
    >>> run("vagrant up %s --no-provision" % box)

Vagrant provision -- unless contraindicated.

    >>> if skip_provisioning:
    ...     print >> sys.stderr, "Skipping provisioning"
    ... else:
    ...     print >> sys.stderr, "Provisioning"
    ...     o = run("vagrant provision %s" % box)

Reboot the box. We only care about what survives a restart.

    >>> if skip_restart:
    ...     print >> sys.stderr, "Skipping restart"
    ... else:
    ...     print >> sys.stderr, "Poweroff %s" % box
    ...     p = subprocess.call('vagrant ssh %s -c "sudo poweroff"' % box, shell=True)
    ...     time.sleep(20)
    ...     print >> sys.stderr, "Bringing %s back up" % box
    ...     run("vagrant up %s --no-provision" % box)
    ...     print >> sys.stderr, "Waiting for services to start..."
    ...     time.sleep(90)

And, now run tests against the box.

    >>> print >> sys.stderr, "Running tests against box"

Check hostname:

    >>> rez = ssh_run('hostname')
    >>> rez.strip() == box
    True

Use lsof to make sure we are listening on all expected ports
in all expected ways.

ip4 listeners

    >>> rez = ssh_run('sudo lsof -i4 -i6 -sTCP:LISTEN -Pn | tail -n +2')
    >>> listeners = sorted(set(cut(rez, [0, 2, 8])))

Zope

    >>> print "\n".join([s for s in listeners if 'plone_daemon' in s])
    python...   plone_daemon    127.0.0.1:8081
    python...   plone_daemon    127.0.0.1:8082
    zeoserver   plone_daemon    127.0.0.1:8100

haproxy

    >>> print "\n".join([s for s in listeners if 'haproxy' in s])
    haproxy haproxy *:1080
    haproxy haproxy *:8080

varnish

    >>> listening_on = ['127.0.0.1:6082', '*:6081']
    >>> rez = "\n".join([s for s in listeners if 'varnishd' in s])
    >>> [s for s in listening_on if s not in rez]
    []

Nginx (nginx groups are different in different OS flavors)

    >>> print "\n".join([s for s in listeners if 'nginx' in s])
    nginx   ...     *:80
    nginx   ...     *:80

Postfix

    # smtpd
    >>> print "\n".join([s for s in listeners if ':25' in s])
    master  root    *:25...

Munin

    >>> print "\n".join([s for s in listeners if 'munin' in s])
    munin-nod  root *:4949

Check the process list for all the daemons we expect.

    >>> we_expect = ['haproxy', 'munin-node', 'nginx', 'nginx', 'pickup', 'python', 'qmgr', 'supervisord', 'varnishd', 'varnishd']
    >>> rez = ssh_run('ps  -eo comm')
    >>> [s for s in we_expect if s not in rez]
    []

Check supervisor's job list.

    >>> print joined_cut(ssh_run('sudo supervisorctl status'), [0, 1], True)
    zeoserver_zeoclient1    RUNNING
    zeoserver_zeoclient2    RUNNING
    zeoserver_zeoserver RUNNING

We should be able to get a page on port 80.

    >>> print ssh_run('curl --ipv4 -I -s http://%s | egrep "^(HTTP|Content-Type|X-Varnish-Cache)"' % box)
    HTTP/1.1 200 OK
    Content-Type: text/html;charset=utf-8
    X-Varnish-Cache: MISS

And, we should have gzip encoding available:

    >>> print ssh_run('curl --ipv4 -H "Accept-Encoding:gzip" -I -s http://%s | egrep "^(HTTP|Content-Encoding)"' % box)
    HTTP/1.1 200 OK
    Content-Encoding: gzip...

Asking twice for a static resource should result in a cache hit.

    >>> print ssh_run('curl --ipv4 -I -s http://%s/logo.png > /dev/null' % box)
    >>> print ssh_run('curl --ipv4 -I -s http://%s/logo.png | egrep "^(HTTP|Content-Type|X-Varnish-Cache)"' % box)
    HTTP/1.1 200 OK
    Content-Type: image/png
    X-Varnish-Cache: HIT

The restart script exercises our control of the supervisor
processes, haproxy and varnish.

    >>> print ssh_run('sudo /usr/local/plone-5.2*/zeoserver/scripts/restart_clients.sh')
    Marking client 1 down for maintenance
    Restarting client 1
    zeoserver_zeoclient1: stopped
    Waiting a bit...
    zeoserver_zeoclient1: started
    Waiting a bit...
    Fetch site homepages to warm cache
    /Plone
    Marking client 1 available
    <BLANKLINE>
    Waiting between clients
    <BLANKLINE>
    Marking client 2 down for maintenance
    Restarting client 2
    zeoserver_zeoclient2: stopped
    Waiting a bit...
    zeoserver_zeoclient2: started
    Waiting a bit...
    Fetch site homepages to warm cache
    /Plone
    Marking client 2 available
    Purging varnish cache
      /Plone
    <BLANKLINE>
    Done

The varnish cache for this host should now be empty.

    >>> print ssh_run('curl --ipv4 -I -s http://%s/logo.png | egrep "^(HTTP|Content-Type|X-Varnish-Cache)"' % box)
    HTTP/1.1 200 OK
    Content-Type: image/png
    X-Varnish-Cache: MISS

Check our custom munin-node plugin for plone_daemon RSS

    >>> print ssh_run('/etc/munin/plugins/plonezope_res | sort')
    zeoserver-client1.value ...
    zeoserver-client2.value ...
    zeoserver-zeoserver.value ...

    >>> print >> sys.stderr, "Tests done"

Check fail2ban

    >>> print ssh_run('sudo fail2ban-client ping')
    Server replied: pong

    >>> print ssh_run('sudo fail2ban-client status')
    Status
    |- Number of jail:  1
    `- Jail list:       ssh...

Test the too-hot restart script; no output expected

    >>> print ssh_run('sudo /usr/local/plone-5.2*/zeoserver/scripts/restart_if_hot.py')
