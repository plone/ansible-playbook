-----------------------------------
Test with the "multiserver" sample.
-----------------------------------

    >>> sample = 'sample-multiserver.yml'

    >>> extras = r"""
    ... admin_email: test@example.com
    ... plone_initial_password: admin
    ... additional_packages:
    ...   - curl
    ...   - lsof
    ...   - ssl-cert
    ... muninnode_query_ips:
    ...     - 127.0.0.1
    ... """


    >>> import subprocess
    >>> import sys

Set up local-configure.yml by copying our sample.
Append admin email and password.

    >>> with open(sample, 'r') as f:
    ...     with open('local-configure.yml', 'w') as g:
    ...         g.write(f.read() + extras)

Vagrant up

    >>> print >> sys.stderr, "Bringing up %s" % box
    >>> run("vagrant up %s --no-provision" % box)

Vagrant provision -- unless contraindicated.

    >>> if skip_provisioning:
    ...     print >> sys.stderr, "Skipping provisioning"
    ... else:
    ...     print >> sys.stderr, "Provisioning"
    ...     run("vagrant provision %s" % box)

And, now run tests against the box.

    >>> print >> sys.stderr, "Running tests against %s" % box

Use lsof to make sure we are listening on all expected ports
in all expected ways.

    >>> rez = ssh_run('sudo lsof -i4 -sTCP:LISTEN -Pn | tail -n +2')
    >>> listeners = sorted(set(cut(rez, [0, 2, 8])))

    >>> print "\n".join([s for s in listeners if 'plone_daemon' in s])
    python2.7   plone_daemon    127.0.0.1:7081
    python2.7   plone_daemon    127.0.0.1:7082
    python2.7   plone_daemon    127.0.0.1:8081
    python2.7   plone_daemon    127.0.0.1:8082
    zeoserver   plone_daemon    127.0.0.1:7100
    zeoserver   plone_daemon    127.0.0.1:8100

    >>> print "\n".join([s for s in listeners if 'haproxy' in s])
    haproxy haproxy *:1080
    haproxy haproxy *:7080
    haproxy haproxy *:8080

    >>> print "\n".join([s for s in listeners if 'varnishd' in s])
    varnishd        root    127.0.0.1:6082
    varnishd        varnish *:6081

    >>> print "\n".join([s for s in listeners if 'nginx' in s])
    nginx   root    *:443
    nginx   root    *:80
    nginx   www-data    *:443
    nginx   www-data    *:80

    # smtpd
    >>> print "\n".join([s for s in listeners if ':25' in s])
    master  root    *:25

    >>> rez = ssh_run('sudo lsof -i6 -sTCP:LISTEN -Pn | tail -n +2')
    >>> listeners = cut(rez, [0, 2, 8])

    >>> print "\n".join([s for s in listeners if 'munin' in s])
    munin-nod  root *:4949

Check the process list.

    >>> print ssh_run('ps  -eo comm,euser:15,egroup | egrep "(python|varnishd|nginx|haproxy|supervisor|memmon|munin|post|fail2ban)" | egrep -v "(egrep|systemd)" | sort | uniq')
    fail2ban-server root            root
    haproxy         haproxy         haproxy
    memmon          root            root
    munin-node      root            root
    nginx           root            root
    nginx           www-data        www-data
    pickup          postfix         postfix
    python2.7       plone_daemon    plone_group
    qmgr            postfix         postfix
    supervisord     root            root
    varnishd        root            root
    varnishd        varnish         varnish

Check supervisor's job list.

    >>> print joined_cut(ssh_run('sudo supervisorctl status'), [0, 1], True)
    primary_memmon                   RUNNING
    primary_zeoclient1               RUNNING
    primary_zeoclient2               RUNNING
    primary_zeoserver                RUNNING
    secondary_memmon                 RUNNING
    secondary_zeoclient1             RUNNING
    secondary_zeoclient2             RUNNING
    secondary_zeoserver              RUNNING


Primary instance tests
----------------------

Is everything where we expect it to be?

    >>> print joined_cut(ssh_run('ls -la /usr/local/plone-5.0 | tail -n +2'), [0, 2, 3, 8])
    drwxr-xr-x root           ...        .
    ...
    drwxr-xr-x plone_buildout plone_group buildout-cache
    drwxr-xr-x plone_buildout plone_group primary

    >>> print joined_cut(ssh_run('ls -la /usr/local/plone-5.0/primary | tail -n +4'), [0, 2, 3, 8])
    drwxr-xr-x  plone_buildout  plone_group bin
    -rw-r--r--  plone_buildout  plone_group bootstrap.py
    -rw-r--r--  plone_buildout  plone_group buildout.cfg
    drwxr-xr-x  plone_buildout  plone_group develop-eggs
    drwxr-xr-x  plone_buildout  plone_group include
    -rw-------  plone_buildout  plone_group .installed.cfg
    drwxr-xr-x  plone_buildout  plone_group lib
    drwxr-xr-x  plone_buildout  plone_group local
    drwxr-xr-x  plone_buildout  plone_group parts
    -rw-r--r--  plone_buildout  plone_group pip-selfcheck.json
    drwxr-xr-x  plone_buildout  plone_group products
    drwxr-xr-x  root    root    scripts
    drwxr-xr-x  plone_buildout  plone_group src
    drwxr-xr-x  plone_buildout  plone_group var

    >>> print joined_cut(ssh_run('sudo ls -la /var/local/plone-5.0/ | tail -n +2'), [0, 2, 3, 8])
    drwxr-xr-x root         ...         .
    ...
    drwxrws--- plone_daemon plone_group primary

    >>> print joined_cut(ssh_run('sudo ls -la /var/local/plone-5.0/primary | tail -n +4'), [0, 2, 3, 8])
    drwx--S---  plone_daemon    plone_group blobstorage
    drwxrws---  plone_buildout  plone_group client1
    drwxrws---  plone_buildout  plone_group client2
    drwxrws---  plone_buildout  plone_group client_reserved
    drwxrws---  plone_buildout  plone_group filestorage
    drwx------  plone_daemon    plone_group .python-eggs
    drwxrws---  plone_buildout  plone_group zeoserver

    >>> print joined_cut(ssh_run('sudo ls -l /var/local/plone-5.0/primary/filestorage | tail -n +2'), [0, 2, 3, 8])
    -rw-r--r--  plone_daemon    plone_group Data.fs
    -rw-r--r--  plone_daemon    plone_group Data.fs.index
    -rw-r--r--  plone_daemon    plone_group Data.fs.lock
    -rw-r--r--  plone_daemon    plone_group Data.fs.tmp

We should be able to get a page on port 80.

    >>> print ssh_run('curl -I -s http://%s' % box)
    HTTP/1.1 200 OK
    Server: nginx/...
    Date: ...
    X-Varnish: ...
    Age: 0
    Via: 1.1 varnish...
    X-Varnish-Cache: MISS

And, we should have gzip encoding available:

    >>> print ssh_run('curl -H "Accept-Encoding:gzip" -I -s http://%s' % box)
    HTTP/1.1 200 OK
    ...
    Content-Encoding: gzip...

SSL should work. Note that we're testing with a self-signed certificate:

    >>> print ssh_run('curl --insecure -I -s http://%s' % box)
    HTTP/1.1 200 OK
    ...

Let's prove to ourselves that this is Plone 5:

    >>> output = ssh_run('curl http://%s' % box)
    >>> output.find('barceloneta') >= 0
    True

Asking twice for a static resource should result in a cache hit.

    >>> print ssh_run('curl -I -s http://%s/logo.png > /dev/null' % box)
    >>> print ssh_run('curl -I -s http://%s/logo.png' % box)
    HTTP/1.1 200 OK
    Server: nginx/...
    Date: ...
    Content-Type: image/png
    ...
    X-Varnish-Cache: HIT

The restart script exercises our control of the supervisor
processes, haproxy and varnish.

    >>> print ssh_run('sudo /usr/local/plone-5.0/primary/scripts/restart_clients.sh')
    Marking client 1 down for maintenance
    Restarting client 1
    primary_zeoclient1: stopped
    Waiting a bit...
    primary_zeoclient1: started
    Waiting a bit...
    Fetching Plone site-home page
    Marking client 1 available
    <BLANKLINE>
    Waiting between clients
    <BLANKLINE>
    Marking client 2 down for maintenance
    Restarting client 2
    primary_zeoclient2: stopped
    Waiting a bit...
    primary_zeoclient2: started
    Waiting a bit...
    Fetching Plone site-home page
    Marking client 2 available
    Purging varnish cache
    Purging varnish cache
    <BLANKLINE>
    Done

The varnish cache for this host should now be empty.

    >>> print ssh_run('curl -I -s http://%s/logo.png' % box)
    HTTP/1.1 200 OK
    Server: nginx/...
    Date: ...
    Content-Type: image/png
    ...
    X-Varnish-Cache: MISS


Secondary instance tests
------------------------

    >>> print joined_cut(ssh_run('ls -la /usr/local/plone-4.3 | tail -n +2'), [0, 2, 3, 8])
    drwxr-xr-x  root    ...     .
    ...                         ..
    drwxr-xr-x  plone_buildout  plone_group buildout-cache
    drwxr-xr-x  plone_buildout  plone_group secondary

    >>> print joined_cut(ssh_run('ls -la /usr/local/plone-4.3/secondary | tail -n +4'), [0, 2, 3, 8])
    drwxr-xr-x  plone_buildout  plone_group bin
    -rw-r--r--  plone_buildout  plone_group bootstrap.py
    -rw-r--r--  plone_buildout  plone_group buildout.cfg
    drwxr-xr-x  plone_buildout  plone_group develop-eggs
    drwxr-xr-x  plone_buildout  plone_group include
    -rw-------  plone_buildout  plone_group .installed.cfg
    drwxr-xr-x  plone_buildout  plone_group lib
    drwxr-xr-x  plone_buildout  plone_group local
    drwxr-xr-x  plone_buildout  plone_group parts
    -rw-r--r--  plone_buildout  plone_group pip-selfcheck.json
    drwxr-xr-x  plone_buildout  plone_group products
    drwxr-xr-x  root    root    scripts
    drwxr-xr-x  plone_buildout  plone_group src
    drwxr-xr-x  plone_buildout  plone_group var

    >>> print joined_cut(ssh_run('sudo ls -la /var/local/plone-4.3 | tail -n +2'), [0, 2, 3, 8])
    drwxr-xr-x  root    staff   .
    ...                         ..
    drwxrws---  plone_daemon    plone_group secondary

    >>> print joined_cut(ssh_run('sudo ls -la /var/local/plone-4.3/secondary/ | tail -n +4'), [0, 2, 3, 8])
    drwx--S---  plone_daemon    plone_group blobstorage
    drwxrws---  plone_buildout  plone_group client1
    drwxrws---  plone_buildout  plone_group client2
    drwxrws---  plone_buildout  plone_group client_reserved
    drwxrws---  plone_buildout  plone_group filestorage
    drwx------  plone_daemon    plone_group .python-eggs
    drwxrws---  plone_buildout  plone_group zeoserver

    >>> print joined_cut(ssh_run('sudo ls -l /var/local/plone-4.3/secondary/filestorage | tail -n +2'), [0, 2, 3, 8])
    -rw-r--r--  plone_daemon    plone_group Data.fs
    -rw-r--r--  plone_daemon    plone_group Data.fs.index
    -rw-r--r--  plone_daemon    plone_group Data.fs.lock
    -rw-r--r--  plone_daemon    plone_group Data.fs.tmp


We should be able to get a page on port 80.

    >>> print ssh_run('curl -I -s http://localhost')
    HTTP/1.1 200 OK
    Server: nginx/...
    Date: ...
    X-Varnish: ...
    Age: 0
    Via: 1.1 varnish...
    X-Varnish-Cache: MISS

And, we should have gzip encoding available:

    >>> print ssh_run('curl -H "Accept-Encoding:gzip" -I -s http://%s' % box)
    HTTP/1.1 200 OK
    ...
    Content-Encoding: gzip...

Let's prove to ourselves that this is Plone 4:

    >>> output = ssh_run('curl http://localhost')
    >>> output.find('barceloneta') >= 0
    False

Asking twice for a static resource should result in a cache hit.

    >>> print ssh_run('curl -I -s http://localhost/logo.png > /dev/null')
    >>> print ssh_run('curl -I -s http://localhost/logo.png')
    HTTP/1.1 200 OK
    Server: nginx/...
    Date: ...
    Content-Type: image/png
    ...
    X-Varnish-Cache: HIT

The restart script exercises our control of the supervisor
processes, haproxy and varnish.

    >>> print ssh_run('sudo /usr/local/plone-4.3/secondary/scripts/restart_clients.sh')
    Marking client 1 down for maintenance
    Restarting client 1
    secondary_zeoclient1: stopped
    Waiting a bit...
    secondary_zeoclient1: started
    Waiting a bit...
    Fetching Plone site-home page
    Marking client 1 available
    <BLANKLINE>
    Waiting between clients
    <BLANKLINE>
    Marking client 2 down for maintenance
    Restarting client 2
    secondary_zeoclient2: stopped
    Waiting a bit...
    secondary_zeoclient2: started
    Waiting a bit...
    Fetching Plone site-home page
    Marking client 2 available
    Purging varnish cache
    <BLANKLINE>
    Done

The varnish cache for this host should now be empty.

    >>> print ssh_run('curl -I -s http://localhost/logo.png')
    HTTP/1.1 200 OK
    Server: nginx/...
    Date: ...
    Content-Type: image/png
    ...
    X-Varnish-Cache: MISS


    >>> print >> sys.stderr, "Tests done"

