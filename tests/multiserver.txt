-----------------------------------
Test with the "multiserver" sample.
-----------------------------------

    >>> sample = 'sample-multiserver.yml'

    >>> extras = r"""
    ... admin_email: test@example.com
    ... plone_initial_password: admin
    ... additional_packages:
    ...   - curl
    ...   - lsof
    ... muninnode_query_ips:
    ...     - 127.0.0.1
    ... """


    >>> import subprocess
    >>> import sys
    >>> import time

Set up local-configure.yml by copying our sample.
Append admin email and password.

    >>> with open(sample, 'r') as f:
    ...     with open('local-configure.yml', 'w') as g:
    ...         g.write(f.read() + extras)

Vagrant up

    >>> print >> sys.stderr, "Bringing up %s" % box
    >>> run("vagrant up %s --no-provision" % box)

Vagrant provision -- unless contraindicated.

    >>> if skip_provisioning:
    ...     print >> sys.stderr, "Skipping provisioning"
    ... else:
    ...     print >> sys.stderr, "Provisioning"
    ...     run("vagrant provision %s" % box)

Add a test host entry.

    >>> command = "echo '127.0.0.1 test.example.com' | sudo tee -a /etc/hosts"
    >>> p = subprocess.call('vagrant ssh %s -c "%s"' % (box, command), shell=True)

Reboot the box. We only care about what survives a restart.

    >>> print >> sys.stderr, "Poweroff %s" % box
    >>> p = subprocess.call('vagrant ssh %s -c "sudo poweroff"' % box, shell=True)

    >>> time.sleep(10)
    >>> print >> sys.stderr, "Bringing %s back up" % box
    >>> run("vagrant up %s --no-provision" % box)
    >>> print >> sys.stderr, "Waiting for services to start..."
    >>> time.sleep(60)

And, now run tests against the box.

    >>> print >> sys.stderr, "Running tests against %s" % box

Check our motd.

    >>> print ssh_run('cat /etc/motd')
    <BLANKLINE>
    This server is configured via Ansible.
    Do not change configuration settings directly.
    <BLANKLINE>
    Last Ansible provisioning: ...
    <BLANKLINE>
    Admin email: test@example.com
    <BLANKLINE>
    Custom Services/Ports
    ---------------------
    plone:
    - primary: /usr/local/plone-5.0/primary
        /Plone: http://xenial, aliases: [u'default']
        /Plone: https://xenial, aliases: [u'default']
        zeo server: 127.0.0.1:8100
        haproxy front end: 8080
        zeo clients: 127.0.0.1:8081 127.0.0.1:8082
    - secondary: /usr/local/plone-4.3/secondary
        /Plone: http://localhost, aliases: []
        zeo server: 127.0.0.1:7100
        haproxy front end: 7080
        zeo clients: 127.0.0.1:7081 127.0.0.1:7082
    haproxy monitor: http://127.0.0.1:1080/admin
    varnish: 127.0.0.1:6081
    varnish admin: 127.0.0.1:6082
    munin-node: 4949
    postfix: 25 (host-only)
    nginx:
    - xenial: *:80
    - xenial: *:443
    - localhost: *:80
    - test.example.com:80
    <BLANKLINE>

Use lsof to make sure we are listening on all expected ports
in all expected ways.

    >>> rez = ssh_run('sudo lsof -i4 -i6 -sTCP:LISTEN -Pn | tail -n +2')
    >>> listeners = sorted(set(cut(rez, [0, 2, 8])))

    >>> print "\n".join([s for s in listeners if 'plone_daemon' in s])
    python...   plone_daemon    127.0.0.1:7081
    python...   plone_daemon    127.0.0.1:7082
    python...   plone_daemon    127.0.0.1:8081
    python...   plone_daemon    127.0.0.1:8082
    zeoserver   plone_daemon    127.0.0.1:7100
    zeoserver   plone_daemon    127.0.0.1:8100

    >>> print "\n".join([s for s in listeners if 'haproxy' in s])
    haproxy haproxy *:1080
    haproxy haproxy *:7080
    haproxy haproxy *:8080

    >>> listening_on = ['127.0.0.1:6082', '*:6081']
    >>> rez = "\n".join([s for s in listeners if 'varnishd' in s])
    >>> [s for s in listening_on if s not in rez]
    []

    >>> print "\n".join([s for s in listeners if 'nginx' in s])
    nginx   ... *:443
    nginx   ... *:80
    nginx   ... *:443
    nginx   ... *:80

    # smtpd
    >>> print "\n".join([s for s in listeners if ':25' in s])
    master  root    *:25...

    >>> print "\n".join([s for s in listeners if 'munin' in s])
    munin-nod  root *:4949

Check the process list.

    >>> print ssh_run('ps  -eo comm,euser:15,egroup | egrep "plone" | egrep -v "(egrep|systemd)" | sort')
    python2.7       plone_daemon    plone_group
    python2.7       plone_daemon    plone_group
    python2.7       plone_daemon    plone_group
    python2.7       plone_daemon    plone_group
    zeoserver       plone_daemon    plone_group
    zeoserver       plone_daemon    plone_group

Check supervisor's job list.

    >>> print joined_cut(ssh_run('sudo supervisorctl status'), [0, 1], True)
    primary_memmon                   RUNNING
    primary_zeoclient1               RUNNING
    primary_zeoclient2               RUNNING
    primary_zeoserver                RUNNING
    secondary_memmon                 RUNNING
    secondary_zeoclient1             RUNNING
    secondary_zeoclient2             RUNNING
    secondary_zeoserver              RUNNING


Primary instance tests
----------------------

Is everything where we expect it to be?

    >>> print joined_cut(ssh_run('ls -la /usr/local/plone-5.0 | tail -n +2'), [0, 2, 3, 8]).replace('.\t', '\t')
    drwxr-xr-x root           ...        .
    ...
    drwxr-xr-x plone_buildout plone_group buildout-cache
    drwxr-xr-x plone_buildout plone_group primary

    >>> print joined_cut(ssh_run('ls -la /usr/local/plone-5.0/primary | tail -n +4'), [0, 2, 3, 8]).replace('.\t', '\t')
    drwxr-xr-x  plone_buildout  plone_group bin
    -rw-r--r--  plone_buildout  plone_group bootstrap.py
    -rw-r--r--  plone_buildout  plone_group buildout.cfg
    -rw-r--r--  plone_buildout  plone_group buildout.log
    drwxr-xr-x  plone_buildout  plone_group develop-eggs
    drwxr-xr-x  plone_buildout  plone_group include
    -rw-------  plone_buildout  plone_group .installed.cfg
    drwxr-xr-x  plone_buildout  plone_group lib...
    drwxr-xr-x  plone_buildout  plone_group parts...
    drwxr-xr-x  plone_buildout  plone_group products
    drwxr-xr-x  root    root    scripts
    drwxr-xr-x  plone_buildout  plone_group src
    drwxr-xr-x  plone_buildout  plone_group var

    >>> print joined_cut(ssh_run('sudo ls -la /var/local/plone-5.0/ | tail -n +2'), [0, 2, 3, 8]).replace('.\t', '\t')
    drwxr-xr-x root         ...         .
    ...
    drwxrws--- plone_daemon plone_group primary

    >>> print joined_cut(ssh_run('sudo ls -la /var/local/plone-5.0/primary | tail -n +4'), [0, 2, 3, 8]).replace('.\t', '\t')
    drwx--S---  plone_daemon    plone_group blobstorage
    drwxrws---  plone_buildout  plone_group client1
    drwxrws---  plone_buildout  plone_group client2
    drwxrws---  plone_buildout  plone_group client_reserved
    drwxrws---  plone_buildout  plone_group filestorage
    drwx------  plone_daemon    plone_group .python-eggs
    drwxrws---  plone_buildout  plone_group zeoserver

    >>> print joined_cut(ssh_run('sudo ls -l /var/local/plone-5.0/primary/filestorage | tail -n +2'), [0, 2, 3, 8]).replace('.\t', '\t')
    -rw-r--r--  plone_daemon    plone_group Data.fs
    -rw-r--r--  plone_daemon    plone_group Data.fs.index
    -rw-r--r--  plone_daemon    plone_group Data.fs.lock
    -rw-r--r--  plone_daemon    plone_group Data.fs.tmp

We should be able to get a page on port 80.

    >>> print ssh_run('curl --ipv4 -I -s http://%s | egrep "^(HTTP|Content-Type|X-Varnish-Cache)"' % box)
    HTTP/1.1 200 OK
    Content-Type: text/html;charset=utf-8
    X-Varnish-Cache: MISS

And, we should have gzip encoding available:

    >>> print ssh_run('curl --ipv4 -H "Accept-Encoding:gzip" -I -s http://%s | egrep "^(HTTP|Content-Encoding)"' % box)
    HTTP/1.1 200 OK
    Content-Encoding: gzip

Asking twice for a static resource should result in a cache hit.

    >>> print ssh_run('curl --ipv4 -I -s http://%s/logo.png > /dev/null' % box)
    >>> print ssh_run('curl --ipv4 -I -s http://%s/logo.png | egrep "^(HTTP|Content-Type|X-Varnish-Cache)"' % box)
    HTTP/1.1 200 OK
    Content-Type: image/png
    X-Varnish-Cache: HIT

SSL should work. Note that we're testing with a self-signed certificate:

    >>> print ssh_run('curl --ipv4 --insecure -I -s http://%s' % box)
    HTTP/1.1 200 OK
    ...

Let's prove to ourselves that this is Plone 5:

    >>> output = ssh_run('curl --ipv4 http://%s' % box)
    >>> output.find('barceloneta') >= 0
    True

Asking twice for a static resource should result in a cache hit.

    >>> print ssh_run('curl --ipv4 -I -s http://%s/logo.png > /dev/null' % box)
    >>> print ssh_run('curl --ipv4 -I -s http://%s/logo.png' % box)
    HTTP/1.1 200 OK
    Server: nginx/...
    Date: ...
    Content-Type: image/png
    ...
    X-Varnish-Cache: HIT
    ...

The restart script exercises our control of the supervisor
processes, haproxy and varnish.

    >>> print ssh_run('sudo /usr/local/plone-5.0/primary/scripts/restart_clients.sh')
    Marking client 1 down for maintenance
    Restarting client 1
    primary_zeoclient1: stopped
    Waiting a bit...
    primary_zeoclient1: started
    Waiting a bit...
    Fetching Plone site-home page
    Marking client 1 available
    <BLANKLINE>
    Waiting between clients
    <BLANKLINE>
    Marking client 2 down for maintenance
    Restarting client 2
    primary_zeoclient2: stopped
    Waiting a bit...
    primary_zeoclient2: started
    Waiting a bit...
    Fetching Plone site-home page
    Marking client 2 available
    Purging varnish cache
    Purging varnish cache
    <BLANKLINE>
    Done

The varnish cache for this host should now be empty.

    >>> print ssh_run('curl --ipv4 -I -s http://%s/logo.png' % box)
    HTTP/1.1 200 OK
    Server: nginx/...
    Date: ...
    Content-Type: image/png
    ...
    X-Varnish-Cache: MISS
    ...


Secondary instance tests
------------------------

    >>> print joined_cut(ssh_run('ls -la /usr/local/plone-4.3 | tail -n +2'), [0, 2, 3, 8]).replace('.\t', '\t')
    drwxr-xr-x  root    ...     .
    ...                         ..
    drwxr-xr-x  plone_buildout  plone_group buildout-cache
    drwxr-xr-x  root    root    python2.7
    drwxr-xr-x  plone_buildout  plone_group secondary

    >>> print joined_cut(ssh_run('ls -la /usr/local/plone-4.3/secondary | tail -n +4'), [0, 2, 3, 8]).replace('.\t', '\t')
    drwxr-xr-x  plone_buildout  plone_group bin
    -rw-r--r--  plone_buildout  plone_group bootstrap.py
    -rw-r--r--  plone_buildout  plone_group buildout.cfg
    -rw-r--r--  plone_buildout  plone_group buildout.log
    drwxr-xr-x  plone_buildout  plone_group develop-eggs
    -rw-------  plone_buildout  plone_group .installed.cfg
    drwxr-xr-x  plone_buildout  plone_group parts...
    drwxr-xr-x  plone_buildout  plone_group products
    drwxr-xr-x  root    root    scripts
    drwxr-xr-x  plone_buildout  plone_group src
    drwxr-xr-x  plone_buildout  plone_group var

    >>> print joined_cut(ssh_run('sudo ls -la /var/local/plone-4.3 | tail -n +2'), [0, 2, 3, 8]).replace('.\t', '\t')
    drwxr-xr-x  root    ...   .
    ...                         ..
    drwxrws---  plone_daemon    plone_group secondary

    >>> print joined_cut(ssh_run('sudo ls -la /var/local/plone-4.3/secondary/ | tail -n +4'), [0, 2, 3, 8]).replace('.\t', '\t')
    drwx--S---  plone_daemon    plone_group blobstorage
    drwxrws---  plone_buildout  plone_group client1
    drwxrws---  plone_buildout  plone_group client2
    drwxrws---  plone_buildout  plone_group client_reserved
    drwxrws---  plone_buildout  plone_group filestorage
    drwx------  plone_daemon    plone_group .python-eggs
    drwxrws---  plone_buildout  plone_group zeoserver

    >>> print joined_cut(ssh_run('sudo ls -l /var/local/plone-4.3/secondary/filestorage | tail -n +2'), [0, 2, 3, 8]).replace('.\t', '\t')
    -rw-r--r--  plone_daemon    plone_group Data.fs
    -rw-r--r--  plone_daemon    plone_group Data.fs.index
    -rw-r--r--  plone_daemon    plone_group Data.fs.lock
    -rw-r--r--  plone_daemon    plone_group Data.fs.tmp


We should be able to get a page on port 80.

    >>> print ssh_run('curl --ipv4 -I -s http://localhost | egrep "^(HTTP|Content-Type|X-Varnish-Cache)"')
    HTTP/1.1 200 OK
    Content-Type: text/html;charset=utf-8
    X-Varnish-Cache: MISS

And, we should have gzip encoding available:

    >>> print ssh_run('curl --ipv4 -H "Accept-Encoding:gzip" -I -s http://localhost/ | egrep "^(HTTP|Content-Encoding)"')
    HTTP/1.1 200 OK
    Content-Encoding: gzip

Let's prove to ourselves that this is Plone 4:

    >>> output = ssh_run('curl --ipv4 http://localhost')
    >>> output.find('barceloneta') >= 0
    False

Asking for test.example.com should also produce a Plone 4 page:

    >>> output = ssh_run('curl --ipv4 http://test.example.com')
    >>> output.find('barceloneta') >= 0
    False

Asking twice for a static resource should result in a cache hit.

    >>> print ssh_run('curl --ipv4 -I -s http://localhost/logo.png > /dev/null')
    >>> print ssh_run('curl --ipv4 -I -s http://localhost/logo.png | egrep "^(HTTP|Content-Type|X-Varnish-Cache)"')
    HTTP/1.1 200 OK
    Content-Type: image/png
    X-Varnish-Cache: HIT

The restart script exercises our control of the supervisor
processes, haproxy and varnish.

    >>> print ssh_run('sudo /usr/local/plone-4.3/secondary/scripts/restart_clients.sh')
    Marking client 1 down for maintenance
    Restarting client 1
    secondary_zeoclient1: stopped
    Waiting a bit...
    secondary_zeoclient1: started
    Waiting a bit...
    Fetching Plone site-home page
    Marking client 1 available
    <BLANKLINE>
    Waiting between clients
    <BLANKLINE>
    Marking client 2 down for maintenance
    Restarting client 2
    secondary_zeoclient2: stopped
    Waiting a bit...
    secondary_zeoclient2: started
    Waiting a bit...
    Fetching Plone site-home page
    Marking client 2 available
    Purging varnish cache
    <BLANKLINE>
    Done

    >>> print ssh_run('curl --ipv4 -I -s http://localhost/logo.png | egrep "^(HTTP|Content-Type|X-Varnish-Cache)"')
    HTTP/1.1 200 OK
    Content-Type: image/png
    X-Varnish-Cache: MISS

    >>> print >> sys.stderr, "Tests done"

