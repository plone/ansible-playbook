vcl 4.0;

{% for backend in playbook_plones %}
backend {{ backend.plone_instance_name|default(plone_instance_name) }} {
	.host = "127.0.0.1";
	.port = "{{ backend.loadbalancer_port|default(loadbalancer_port) }}";
{% if proxy_cache_backend_extra is defined %}

{{ proxy_cache_backend_extra }}

{% endif %}
}
{% endfor %}

acl purge {
    "127.0.0.1";
	"localhost";
}

sub vcl_recv {

{% if playbook_plones|length > 1 %}
    set req.backend_hint = {{ playbook_plones[0].plone_instance_name|default(plone_instance_name) }};
{% for backend in playbook_plones %}
{% for site in backend.webserver_virtualhosts|default([{'hostname':'default'}]) %}
{% if site.get('zodb_path') != None %}
    if (req.url ~ "{{ site.protocol|default('http') }}/{{ site.hostname }}:") {
        set req.backend_hint = {{ backend.plone_instance_name|default(plone_instance_name) }};
    }
{% for alias in site.get('aliases', []) %}
    if (req.url ~ "{{ site.protocol|default('http') }}/{{ alias }}:") {
        set req.backend_hint = {{ backend.plone_instance_name|default(plone_instance_name) }};
    }
{% endfor %}
{% endif %}
{% endfor %}
{% endfor %}
{% endif %}

{{ proxy_cache_vcl_extra }}

    call sanitize_compression;

    # Handle special requests
    if (req.method != "GET" && req.method != "HEAD") {
       # PURGE - The CacheFu product can invalidate updated URLs
       if (req.method == "PURGE") {
           if (!client.ip ~ purge) {
               return (synth(405, "Not allowed."));
           }
           return(purge);
       }
       # Handle special requests
       if (req.method != "POST" &&
           req.method != "PUT" &&
           req.method != "TRACE" &&
           req.method != "OPTIONS" &&
           req.method != "DELETE") {
         /* Non-RFC2616 or CONNECT which is weird. */
         return(pipe);
       }
       return(pass);
    }

    # Do not cache the creation of objects in Plone
    if (req.url ~ "createObject"){
        return(pass);
    }

{%if proxy_cache_block_basic_auth|default(True) %}
    # Don't allow basic auth via this route.
    # If you want to login at the Zope root, use an ssh tunnel.
    if (req.http.Authorization && req.http.Authorization !~ "Bearer") {
        unset req.http.Authorization;
    }
{% endif %}

    call sanitize_cookies;

    call annotate_request;

    # The default vcl_recv is used from here.
    return(hash);
}

sub vcl_backend_response {
    set beresp.grace = {{proxy_cache_grace}};

    if (bereq.method != "GET" && bereq.method != "HEAD") {
        set beresp.grace = 0s;
        set beresp.ttl = 0s;
        unset beresp.http.ETag;
        set beresp.uncacheable = true;
        set beresp.http.X-Varnish-Action = "FETCH (pass - request method not cacheable)";
        call rewrite_s_maxage;
        return(deliver);
    }
    if (bereq.url ~ "/(login|require_login|logout)$") {
        set beresp.grace = 0s;
        set beresp.ttl = 0s;
        unset beresp.http.ETag;
        set beresp.uncacheable = true;
        set beresp.http.X-Varnish-Action = "FETCH (pass - login scripts are not cacheable)";
        call rewrite_s_maxage;
        return(deliver);
    }
    if (beresp.http.Set-Cookie) {
        set beresp.grace = 0s;
        set beresp.ttl = 0s;
        unset beresp.http.ETag;
        set beresp.uncacheable = true;
        set beresp.http.X-Varnish-Action = "FETCH (pass - response sets cookie)";
        call rewrite_s_maxage;
        return(deliver);
    }
    if (!beresp.http.Cache-Control ~ "s-maxage=[1-9]" && beresp.http.Cache-Control ~ "(private|no-cache|no-store)") {
        set beresp.grace = 0s;
        set beresp.ttl = 0s;
        set beresp.uncacheable = true;
        set beresp.http.X-Varnish-Action = "FETCH (pass - response sets private/no-cache/no-store token)";
        call rewrite_s_maxage;
        return(deliver);
    }
    if (bereq.http.X-Anonymous && !beresp.http.Cache-Control) {
        set beresp.ttl = {{proxy_cache_anon_ttl}};
        set beresp.http.X-Varnish-Action = "FETCH (override - backend not setting cache control)";
    }
    if (!bereq.http.X-Anonymous && !beresp.http.Cache-Control) {
        set beresp.grace = 0s;
        set beresp.ttl = 0s;
        set beresp.uncacheable = true;
        set beresp.http.X-Varnish-Action = "FETCH (pass - not cacheable)";
        return(deliver);
    }
    if (!bereq.http.X-Anonymous && beresp.http.ETag ~ "^|") {
        set beresp.http.X-Varnish-Action = "FETCH (override - cache as anon)";
        set bereq.http.X-Anonymous = "True";
    }

    call rewrite_s_maxage;
    return(deliver);
}

sub vcl_hit {
    set req.http.x-cache = "hit";
}

sub vcl_miss {
    set req.http.x-cache = "miss";
}

sub vcl_pass {
    set req.http.x-cache = "pass";
}

sub vcl_pipe {
    set req.http.x-cache = "pipe uncacheable";
}

sub vcl_synth {
    set resp.http.x-cache = "synth " + resp.status + ": " + resp.reason;
}

sub vcl_deliver {
    call rewrite_age;
      if (obj.uncacheable) {
          set req.http.x-cache = req.http.x-cache + " uncacheable" ;
      } else {
          set req.http.x-cache = req.http.x-cache + " cached" ;
      }
      set resp.http.x-cache = req.http.x-cache;
}

# Sanitize compression handling
sub sanitize_compression {
    if (req.http.Accept-Encoding) {
        if (req.url ~ "\.{{ nocompress_ext }}$") {
            # No point in compressing these
            unset req.http.Accept-Encoding;
        } elsif (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding = "gzip";
        } elsif (req.http.Accept-Encoding ~ "deflate" && req.http.user-agent !~ "MSIE") {
            set req.http.Accept-Encoding = "deflate";
        } else {
            # unknown algorithm
            unset req.http.Accept-Encoding;
        }
    }
}

# Sanitize cookies so they do not needlessly destroy cacheability for anonymous pages
sub sanitize_cookies {
    if (req.http.Cookie) {
        set req.http.Cookie = ";" + req.http.Cookie;
        set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
        set req.http.Cookie = regsuball(req.http.Cookie, ";{{ cache_sanitize_cookie_exceptions }}=", "; \1=");
        set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
        set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

        if (req.http.Cookie == "") {
            unset req.http.Cookie;
        }
    }
}

# Keep auth/anon variants apart if "Vary: X-Anonymous" is in the response
sub annotate_request {
    if (!(req.http.Cookie && req.http.Cookie ~ "{{ nonanonymous_cookies }}=")) {
        set req.http.X-Anonymous = "True";
    }
}

# The varnish response should always declare itself to be fresh
sub rewrite_age {
    if (resp.http.Age) {
        set resp.http.X-Varnish-Age = resp.http.Age;
        set resp.http.Age = "0";
    }
}

# Rewrite s-maxage to exclude from intermediary proxies
# (to cache *everywhere*, just use 'max-age' token in the response to avoid this override)
sub rewrite_s_maxage {
    {% if proxy_cache_clean_smaxage|default(True) %}
    if (beresp.http.Cache-Control ~ "s-maxage") {
        set beresp.http.Cache-Control = regsub(beresp.http.Cache-Control, "s-maxage=[0-9]+", "s-maxage=0");
    }
    {% endif %}
}

{{ proxy_cache_extra }}