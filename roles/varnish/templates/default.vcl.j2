vcl 4.0;

backend default {
	.host = "127.0.0.1";
	.port = "{{ loadbalancer_port }}";
}

acl purge {
	"localhost";
}

sub vcl_recv {

    # Sanitize compression handling
    if (req.http.Accept-Encoding) {
        if (req.url ~ "\.{{ nocompress_ext }}$") {
            # No point in compressing these
            unset req.http.Accept-Encoding;
        } elsif (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding = "gzip";
        } elsif (req.http.Accept-Encoding ~ "deflate" && req.http.user-agent !~ "MSIE") {
            set req.http.Accept-Encoding = "deflate";
        } else {
            # unknown algorithm
            unset req.http.Accept-Encoding;
        }
    }

    # Handle special requests
    if (req.method != "GET" && req.method != "HEAD") {
       # POST - Logins and edits
       if (req.method == "POST") {
           return(pass);
       }
       # PURGE - The CacheFu product can invalidate updated URLs
       if (req.method == "PURGE") {
           if (!client.ip ~ purge) {
               return( synth(405,"Not allowed."));
           }
           return(purge);
       }
    }

    # Do not cache the creation of objects in Plone
    if (req.url ~ "createObject"){
        return(pass);
    }

    # Don't allow basic auth via this route.
    # If you want to login at the Zope root, use an ssh tunnel.
    if (req.http.Authorization) {
        unset req.http.Authorization;
    }

    # Sanitize cookies so they do not needlessly destroy cacheability for anonymous pages
    if (req.http.Cookie) {
        set req.http.Cookie = ";" + req.http.Cookie;
        set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
        set req.http.Cookie = regsuball(req.http.Cookie, ";{{ cache_sanitize_cookie_exceptions }}=", "; \1=");
        set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
        set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

        if (req.http.Cookie == "") {
            unset req.http.Cookie;
        }
    }

    # Annotate request with X-Anonymous header if anonymous
    if (!(req.http.Cookie && req.http.Cookie ~ "{{ nonanonymous_cookies }}=")) {
        set req.http.X-Anonymous = "True";
    }

   # The default vcl_recv is used from here.
}

sub vcl_deliver {
    if (obj.hits > 0) {
        set resp.http.X-Varnish-Cache = "HIT";
    }
    else {
        set resp.http.X-Varnish-Cache = "MISS";
    }
}

sub vcl_backend_response {
    # Don't allow static files to set cookies.
    # (?i) denotes case insensitive in PCRE (perl compatible regular expressions).
    # This list of extensions appears twice, once here and again in vcl_recv so
    # make sure you edit both and keep them equal.
    if (bereq.url ~ "(?i)\.{{ no_response_cookie_ext }}(\?.*)?$") {
      unset beresp.http.set-cookie;
    }

    # Allow items to be stale if needed.
    #set beresp.grace = 6h;
}
