---

- hosts: all
  become: yes
  become_method: sudo
  gather_facts: yes

  pre_tasks:

    - name: Fail if Ansible is old
      fail: msg="We need updates in Ansible 2.5.0. Please update your kit. 'pip install -U Ansible'"
      when: ansible_version.full is version('2.5.0', '<')
      tags:
        - always

    - name: Include vars from local-configure.yml if found
      include_vars: "{{ item }}"
      with_first_found:
       - local-configure.yml
       - null.yml
      tags:
        - update_packages
        - plone
        - plone1
        - plone2
        - plone3
        - plone4
        - haproxy
        - varnish
        - restart_script
        - postfix
        - logwatch
        - munin
        - motd
        - nginx
        - certbot
        - timezone
        - audit

    - name: Handle undefined SSL hostnames
      set_fact:
        certbot_ssl: off
        ssl_hostnames: []
      when: ssl_hostnames is undefined or certbot_ssl is undefined
      tags:
        - nginx
        - certbot

    - name: Define primary SSL name
      set_fact:
        ssl_primary: '{{ ssl_hostnames[0] }}'
      when: certbot_ssl and ssl_hostnames
      tags:
        - nginx
        - certbot

    - name: Fail if no administrative email set
      fail:
        msg: "You must set the admin_email variable."
      when: not admin_email
      tags:
        - plone
        - plone1
        - plone2
        - plone3
        - plone4
        - haproxy
        - varnish
        - restart_script
        - postfix
        - logwatch
        - munin
        - motd
        - nginx
        - certbot

    - name: Update packages via apt
      when: ansible_os_family == 'Debian'
      apt: upgrade=dist update_cache=yes
      tags:
        - update_packages

    - name: Ensure optional packages via apt
      when: ansible_os_family == 'Debian'
      apt: pkg="{{ additional_packages|default([]) }}" state=present
      tags:
        - update_packages

    - name: Enable aditional repos for CentOS
      yum: pkg={{ item }} state=present
      when: ansible_distribution == 'CentOS'
      with_items:
        - epel-release
      tags:
        - munin
        - varnish
        - update_packages

    - name: Ensure optional packages via yum
      when: ansible_os_family == 'RedHat'
      yum: name={{ item }} state=present update_cache=yes
      with_items: "{{ additional_packages|default([]) }}"
      tags:
        - update_packages

    - name: Ensure selinux packages via yum
      when: ansible_os_family == 'RedHat' and ansible_selinux and ansible_selinux.status == 'enabled'
      yum: name={{ item }} state=present update_cache=yes
      with_items:
        - libsemanage-python
      tags:
        - nginx
        - haproxy
        - update_packages

    - name: Ensure certbot package
      when: certbot_ssl
      package:
        name: certbot
        state: present
      tags:
        - certbot
        - update_packages

    - name: Ensure certbot-nginx plugin
      when: certbot_ssl
      package:
        name: python3-certbot-nginx
        state: present
      ignore_errors: yes
      tags:
        - nginx
        - certbot

    - name: Ensure nginx is started
      service:
        name: nginx
        state: started
        enabled: yes
      when: certbot_ssl
      tags:
        - nginx
        - certbot

    - name: Create certbot certs
      command:
        cmd: "certbot certonly --nginx --noninteractive --agree-tos --email {{ admin_email }} -d {{ ssl_hostnames | join(' -d ') }}"
        creates: "/etc/letsencrypt/live/{{ ssl_primary }}/privkey.pem"
      when: certbot_ssl and ssl_hostnames
      tags:
        - nginx
        - certbot

    - name: check if ssl key exists
      stat:
        path: "/etc/letsencrypt/live/{{ ssl_primary }}/privkey.pem"
      when: certbot_ssl
      register: ssl_key
      tags:
        - nginx
        - certbot

    - name: key_config
      set_fact:
        ssl_config:
          default_server: yes
          certificate:
            crt: "/etc/letsencrypt/live/{{ ssl_primary }}/fullchain.pem"
            key: "/etc/letsencrypt/live/{{ ssl_primary }}/privkey.pem"
          protocol: https
      when: certbot_ssl and ssl_key.stat.exists == True
      tags:
        - nginx
        - certbot

    - name: primary webserver definition
      set_fact:
        primary_webserver: "{{ webserver_virtualhosts[0] }}"
      tags:
        - nginx
        - certbot

    - name: define cert config
      set_fact:
        ssl_webserver: "{{ primary_webserver | combine(ssl_config) }}"
      when: certbot_ssl and ssl_key.stat.exists == True
      tags:
        - nginx
        - certbot

    - name: redirect_to_ssl
      set_fact:
        primary_webserver: "{{ primary_webserver | combine({'extra': 'return 301 https://{}$uri$is_args$args;'.format(primary_webserver.hostname or ssl_primary or '$host')}) }}"
      when: certbot_ssl and redirect_to_ssl and ssl_key.stat.exists == True
      tags:
        - nginx
        - certbot

    - name: redirect_to_primary
      set_fact:
        ssl_webserver: "{{ ssl_webserver | combine({'extra': 'if ($host != \"%s\") {return 301 https://%s$uri$is_args$args;}'%(primary_webserver.hostname or ssl_primary or '$host', primary_webserver.hostname or ssl_primary or '$host')}) }}"
      when: certbot_ssl and ssl_webserver and redirect_to_ssl and ssl_key.stat.exists == True
      tags:
        - nginx
        - certbot

    - name: update cert config
      set_fact:
        webserver_virtualhosts: "{{ [ssl_webserver, primary_webserver] + webserver_virtualhosts[1:] }}"
      when: certbot_ssl and ssl_key.stat.exists == True
      tags:
        - nginx
        - certbot

  roles:

    - role: hostname
      tags:
        - update_packages

    - role: jnv.unattended-upgrades
      when: auto_upgrades|default(True) and ansible_os_family == 'Debian'
      unattended_mail: root
      unattended_origins_patterns:
        - 'origin=${distro_id},archive=${distro_codename}-security'
        - 'o=${distro_id},a=${distro_codename}'
        - 'o=${distro_id},a=${distro_codename}-updates'

    - role: fail2ban
      when: install_fail2ban|default(True)
      tags: fail2ban

    - role: default_config
      tags:
        - plone
        - plone1
        - plone2
        - plone3
        - plone4
        - haproxy
        - varnish
        - restart_script
        - nginx
        - postfix
        - logwatch
        - munin
        - motd

    - role: plone.plone_server
      plone_config: "{{ playbook_plones[0] }}"
      tags:
        - plone
        - plone1

    - role: plone.plone_server
      plone_config: "{{ playbook_plones[1]|default({}) }}"
      when: playbook_plones|length > 1
      tags:
        - plone
        - plone2

    - role: plone.plone_server
      plone_config: "{{ playbook_plones[2]|default({}) }}"
      when: playbook_plones|length > 2
      tags:
        - plone
        - plone3

    - role: plone.plone_server
      plone_config: "{{ playbook_plones[3]|default({}) }}"
      when: playbook_plones|length > 3
      tags:
        - plone
        - plone4

    - role: haproxy
      when: install_loadbalancer|default(True)
      tags: haproxy

    - role: varnish
      when: install_proxycache|default(True)
      tags: varnish

    - role: nginx
      when: install_webserver|default(True)
      tags: nginx

    - role: restart_script
      tags: restart_script

    - role: postfix
      when: install_mailserver|default(True)
      tags: postfix

    - role: logwatch
      when: install_logwatch|default(True)
      tags: logwatch

    - role: munin-node
      when: install_muninnode|default(True)
      tags: munin

    - role: timezone
      when: set_timezone|default(True)
      tags: timezone

    - role: motd
      when: install_motd|default(True)
      tags: motd

    - role: audit
      tags: audit

  tasks:

    - name: Set timezone variables
      tags: timezone
      copy: content={{ timezone|default("UTC\n") }}
            dest=/etc/timezone
            owner=root
            group=root
            mode=0644
            backup=yes
      notify:
        - update timezone

    - name: Add additional nginx conf
      file:
        src: "{{ nginx_additional_conf }}"
        dest: "/etc/nginx/conf.d/nginx-additional-global.conf"
        state: link
      when: nginx_additional_conf is defined
      tags: nginx
      notify:
        - restart nginx

    - name: Add additional nginx site
      file:
        src: "{{ nginx_additional_site }}"
        dest: "/etc/nginx/sites-enabled/nginx-additional-sites.conf"
        state: link
      when: nginx_additional_site is defined
      tags: nginx
      notify:
        - restart nginx

    - name: certbot timer
      service:
        name: certbot.timer
        state: started
        enabled: yes
      ignore_errors: yes
      when: certbot_ssl
      tags: certbot

  handlers:
    - name: update timezone
      when: ansible_os_family == 'Debian'
      command: dpkg-reconfigure --frontend noninteractive tzdata
      tags: timezone

    - name: update timezone
      when: ansible_os_family == 'RedHat'
      file: src=/usr/share/zoneinfo/{{ timezone|default("UTC\n") }}  dest=/etc/localtime state=link force=yes
      tags: timezone
